# ==============================================================================
# Excel Utility Tool - Version 4.0 - Enhanced Edition
# Author: Geoff Lu
# Contact: geoffsmile@gmail.com
# Description: Enhanced version with comprehensive Help system and optimized UI
# Created: July 1, 2025
# Last Modified: July 7, 2025
# ==============================================================================

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# ==============================================================================
# GLOBAL CONFIGURATION
# ==============================================================================

$global:Config = @{
    Version = "4.0"
    Author = "Geoff Lu"
    Email = "geoffsmile@gmail.com"
    CreatedDate = "July 1, 2025"
    LastModified = "July 7, 2025"
    Colors = @{
        Primary = [System.Drawing.Color]::FromArgb(0, 71, 187)        # #0047BB
        Secondary = [System.Drawing.Color]::White                     # #FFFFFF
        Text = [System.Drawing.Color]::FromArgb(64, 64, 64)           # #404040
        Success = [System.Drawing.Color]::FromArgb(76, 175, 80)       # #4CAF50
        Warning = [System.Drawing.Color]::FromArgb(255, 193, 7)       # #FFC107
        Error = [System.Drawing.Color]::FromArgb(244, 67, 54)         # #F44336
        Accent = [System.Drawing.Color]::FromArgb(63, 81, 181)        # #3F51B5
        Background = [System.Drawing.Color]::FromArgb(250, 250, 250)  # #FAFAFA
    }
    Settings = @{
        DefaultInputPath = ""
        DefaultOutputPath = ""
        RememberPaths = $true
        AutoDeleteOriginals = $false
        ShowDetailedLogs = $false
        EnableSoundNotifications = $true
    }
    SettingsPath = Join-Path $PSScriptRoot "settings.json"
    LogPath = Join-Path $PSScriptRoot "logs"
    SupportedFormats = @(".csv", ".txt", ".xls", ".xlsx")
}

# ==============================================================================
# UTILITY FUNCTIONS
# ==============================================================================

function Write-Log {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Message,

        [ValidateSet("INFO","WARNING","ERROR","DEBUG")]
        [string]$Level = "INFO"
    )

    try {
        if (-not (Test-Path $global:Config.LogPath)) {
            New-Item -Path $global:Config.LogPath -ItemType Directory -Force | Out-Null
        }

        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $logFile = Join-Path $global:Config.LogPath "excel_utility_$(Get-Date -Format 'yyyy-MM-dd').log"
        $logEntry = "[$timestamp] [$Level] $Message"

        Add-Content -Path $logFile -Value $logEntry -ErrorAction SilentlyContinue

        if ($global:Config.Settings.ShowDetailedLogs) {
            Write-Host $logEntry -ForegroundColor $(
                switch ($Level) {
                    "ERROR" { "Red" }
                    "WARNING" { "Yellow" }
                    "INFO" { "Green" }
                    default { "White" }
                }
            )
        }
    }
    catch {
        Write-Host "Failed to write to log: $($_.Exception.Message)" -ForegroundColor Red
    }
}

function Load-Settings {
    try {
        if (Test-Path $global:Config.SettingsPath) {
            $jsonContent = Get-Content $global:Config.SettingsPath -Raw | ConvertFrom-Json
            foreach ($key in $jsonContent.PSObject.Properties.Name) {
                if ($global:Config.Settings.ContainsKey($key)) {
                    $global:Config.Settings[$key] = $jsonContent.$key
                }
            }
            Write-Log "Settings loaded successfully"
        }
    }
    catch {
        Write-Log "Error loading settings: $($_.Exception.Message)" "ERROR"
    }
}

function Save-Settings {
    try {
        $global:Config.Settings | ConvertTo-Json | Set-Content $global:Config.SettingsPath
        Write-Log "Settings saved successfully"
        return $true
    }
    catch {
        Write-Log "Error saving settings: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Test-PathValid {
    param([string]$Path)
    return -not [string]::IsNullOrWhiteSpace($Path) -and (Test-Path $Path)
}

function Get-FileCount {
    param([string[]]$Files)
    return if ($Files) { $Files.Count } else { 0 }
}

function Format-FileSize {
    param([long]$Size)
    if ($Size -lt 1KB) { return "$Size bytes" }
    elseif ($Size -lt 1MB) { return "{0:N2} KB" -f ($Size / 1KB) }
    elseif ($Size -lt 1GB) { return "{0:N2} MB" -f ($Size / 1MB) }
    else { return "{0:N2} GB" -f ($Size / 1GB) }
}

# ==============================================================================
# UI COMPONENTS
# ==============================================================================

class StandardButton : System.Windows.Forms.Button {
    StandardButton() {
        $this.FlatStyle = [System.Windows.Forms.FlatStyle]::Standard
        $this.BackColor = $global:Config.Colors.Primary
        $this.ForeColor = $global:Config.Colors.Secondary
        $this.Font = New-Object System.Drawing.Font("Segoe UI", 9, [System.Drawing.FontStyle]::Regular)
        $this.Height = 32
        $this.Cursor = [System.Windows.Forms.Cursors]::Hand
    }
}

class AccentButton : System.Windows.Forms.Button {
    AccentButton() {
        $this.FlatStyle = [System.Windows.Forms.FlatStyle]::Standard
        $this.BackColor = $global:Config.Colors.Accent
        $this.ForeColor = $global:Config.Colors.Secondary
        $this.Font = New-Object System.Drawing.Font("Segoe UI", 9, [System.Drawing.FontStyle]::Regular)
        $this.Height = 30
        $this.Cursor = [System.Windows.Forms.Cursors]::Hand
    }
}

function Show-MessageBox {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Message,

        [string]$Title = "Excel Utility Tool",

        [ValidateSet("Information","Warning","Error","Success")]
        [string]$Type = "Information"
    )

    $iconType = switch ($Type) {
        "Error" { [System.Windows.Forms.MessageBoxIcon]::Error }
        "Warning" { [System.Windows.Forms.MessageBoxIcon]::Warning }
        "Success" { [System.Windows.Forms.MessageBoxIcon]::Information }
        default { [System.Windows.Forms.MessageBoxIcon]::Information }
    }

    Write-Log "MessageBox displayed - Type: $Type, Message: $Message" "INFO"
    return [System.Windows.Forms.MessageBox]::Show($Message, $Title, "OK", $iconType)
}

function Show-HelpDialog {
    $helpForm = New-Object System.Windows.Forms.Form
    $helpForm.Text = "Excel Utility Tool - Help & Documentation"
    $helpForm.Size = New-Object System.Drawing.Size(800, 600)
    $helpForm.StartPosition = "CenterParent"
    $helpForm.FormBorderStyle = "Sizable"
    $helpForm.MinimumSize = New-Object System.Drawing.Size(700, 500)
    $helpForm.BackColor = $global:Config.Colors.Background
    $helpForm.Font = New-Object System.Drawing.Font("Segoe UI", 9)
    $helpForm.Icon = [System.Drawing.SystemIcons]::Information

    # Create TabControl for organized content
    $tabControl = New-Object System.Windows.Forms.TabControl
    $tabControl.Size = New-Object System.Drawing.Size(780, 520)
    $tabControl.Location = New-Object System.Drawing.Point(10, 10)
    $tabControl.Font = New-Object System.Drawing.Font("Segoe UI", 9)
    $helpForm.Controls.Add($tabControl)

    # Overview Tab
    $tabOverview = New-Object System.Windows.Forms.TabPage
    $tabOverview.Text = "Overview"
    $tabOverview.BackColor = $global:Config.Colors.Background
    $tabControl.TabPages.Add($tabOverview)

    $overviewText = New-Object System.Windows.Forms.RichTextBox
    $overviewText.Size = New-Object System.Drawing.Size(760, 480)
    $overviewText.Location = New-Object System.Drawing.Point(10, 10)
    $overviewText.ReadOnly = $true
    $overviewText.BackColor = $global:Config.Colors.Secondary
    $overviewText.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $overviewText.Text = @"
EXCEL UTILITY TOOL - VERSION $($global:Config.Version)
Created by: $($global:Config.Author)
Contact: $($global:Config.Email)
Created: $($global:Config.CreatedDate)
Last Modified: $($global:Config.LastModified)

-------------------------------------------------------------------------------

TOOL DESCRIPTION
This comprehensive Excel Utility Tool is designed to streamline your document processing workflow by providing essential file conversion and security management capabilities. Whether
you're dealing with CSV files, text documents, or password-protected Excel files, this tool offers a user-friendly interface to handle your most common file processing tasks efficiently.

The tool is specifically designed for business professionals, data analysts, administrative staff, and anyone who regularly works with Excel files and needs reliable, fast processing
capabilities.

-------------------------------------------------------------------------------

KEY FEATURES
• File Format Conversion: Convert CSV, TXT, and legacy XLS files to modern XLSX format
• Password Protection Removal: Unlock password-protected Excel files with ease
• Batch Processing: Handle multiple files simultaneously for improved efficiency
• Customizable Settings: Configure default paths and processing preferences
• Comprehensive Logging: Track all operations with detailed log files
• User-Friendly Interface: Intuitive design suitable for users of all technical levels
• Progress Tracking: Real-time progress indicators for all operations
• Error Handling: Robust error management with clear user feedback

-------------------------------------------------------------------------------

SYSTEM REQUIREMENTS
• Windows 10 or later (Windows 11 recommended)
• Microsoft PowerShell 5.1 or later
• .NET Framework 4.7.2 or later
• Microsoft Office Excel (for advanced features)
• Minimum 2GB RAM (4GB recommended)
• 100MB free disk space

-------------------------------------------------------------------------------

KNOWN LIMITATIONS
• Password removal requires all files to share the same password
• Large files (>100MB) may require additional processing time
• Some advanced Excel features may not be preserved during conversion
• Network drives may cause slower processing speeds
• Corrupted files cannot be processed and will generate error messages
"@
    $tabOverview.Controls.Add($overviewText)

    # Instructions Tab
    $tabInstructions = New-Object System.Windows.Forms.TabPage
    $tabInstructions.Text = "Instructions"
    $tabInstructions.BackColor = $global:Config.Colors.Background
    $tabControl.TabPages.Add($tabInstructions)

    $instructionsText = New-Object System.Windows.Forms.RichTextBox
    $instructionsText.Size = New-Object System.Drawing.Size(760, 480)
    $instructionsText.Location = New-Object System.Drawing.Point(10, 10)
    $instructionsText.ReadOnly = $true
    $instructionsText.BackColor = $global:Config.Colors.Secondary
    $instructionsText.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $instructionsText.Text = @"
STEP-BY-STEP INSTRUCTIONS

-------------------------------------------------------------------------------

CONVERTING FILES TO EXCEL (.XLSX)
1. Click the "Convert to Excel (.xlsx)" button on the main interface
2. Select the files you want to convert using the file browser dialog
   • Supported formats: CSV, TXT, XLS
   • Multiple files can be selected simultaneously
3. Choose the destination folder where converted files will be saved
4. Wait for the conversion process to complete
5. Check the status bar for completion confirmation and locate your converted files

-------------------------------------------------------------------------------

UNLOCKING EXCEL FILES
1. Click the "Unlock Excel File" button on the main interface
2. Enter the password used to protect the Excel files in the password dialog
   • Note: All selected files must share the same password
3. Select the password-protected Excel files you want to unlock
4. Choose the destination folder for the unlocked files
5. Monitor the progress bar and wait for the process to complete

-------------------------------------------------------------------------------

MODIFYING TOOL SETTINGS
1. Click the "Application Tool Settings" button on the main interface
2. Configure your preferences in the settings dialog:
   • Default Input Path: Set the default folder for selecting input files
   • Default Output Path: Set the default folder for saving processed files
   • Remember Paths: Enable to automatically remember your folder selections
   • Auto Delete Originals: Enable to automatically delete source files after processing
   • Show Detailed Logs: Enable to display detailed processing information
   • Sound Notifications: Enable audio notifications for completed operations
3. Click "Save" to apply your changes or "Cancel" to discard them
4. Settings are automatically saved and will be restored when you restart the tool

-------------------------------------------------------------------------------

BEST PRACTICES
• Always backup important files before processing
• Use descriptive folder names for better organization
• Regularly check log files for any processing issues
• Keep the tool updated to the latest version for optimal performance
• Test with a small number of files before processing large batches
"@
    $tabInstructions.Controls.Add($instructionsText)

    # FAQ Tab
    $tabFAQ = New-Object System.Windows.Forms.TabPage
    $tabFAQ.Text = "FAQ"
    $tabFAQ.BackColor = $global:Config.Colors.Background
    $tabControl.TabPages.Add($tabFAQ)

    $faqText = New-Object System.Windows.Forms.RichTextBox
    $faqText.Size = New-Object System.Drawing.Size(760, 480)
    $faqText.Location = New-Object System.Drawing.Point(10, 10)
    $faqText.ReadOnly = $true
    $faqText.BackColor = $global:Config.Colors.Secondary
    $faqText.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $faqText.Text = @"
FREQUENTLY ASKED QUESTIONS

-------------------------------------------------------------------------------

Q: What file formats are supported for conversion?
A: The tool supports CSV (Comma-Separated Values), TXT (Plain Text), and XLS (Legacy Excel) files for conversion to XLSX format. The tool automatically detects the file format and applies
the appropriate conversion method.

Q: Can I process multiple files at once?
A: Yes! The tool is designed for batch processing. You can select multiple files of the same or different formats and process them simultaneously, saving significant time for large operations.

Q: What happens if I forget the password for my Excel files?
A: Unfortunately, the tool can only remove passwords if you know the correct password. This is a security feature to protect your data. If you've forgotten the password, you'll need to use
specialized password recovery software.

Q: Are my original files safe during processing?
A: Yes, the tool creates copies of your files during processing. Your original files remain untouched unless you specifically enable the "Auto Delete Originals" setting in the application
settings.

Q: Where can I find the log files?
A: Log files are automatically created in the "logs" folder within the same directory as the tool. Each day's activities are logged in a separate file named with the current date.

Q: Can I customize the default folders?
A: Absolutely! Use the "Application Tool Settings" to set default input and output folders. This saves time by automatically opening your preferred locations when browsing for files.

Q: What should I do if the tool crashes or stops responding?
A: First, check the log files for error messages. Restart the tool and try processing fewer files at once. If problems persist, contact the developer at geoffsmile@gmail.com with details about
the issue.

Q: Is this tool compatible with Office 365?
A: Yes, the tool is compatible with all modern versions of Microsoft Office, including Office 365, Office 2019, and Office 2021. However, some advanced Excel features may not be
preserved during conversion.

Q: Can I use this tool on a network drive?
A: While the tool can access network drives, processing may be slower due to network latency. For best performance, consider copying files to your local drive before processing.

Q: How do I update the tool to the latest version?
A: Currently, updates must be installed manually. Check with the developer periodically for new versions. Future versions may include automatic update functionality.
"@
    $tabFAQ.Controls.Add($faqText)

    # Troubleshooting Tab
    $tabTrouble = New-Object System.Windows.Forms.TabPage
    $tabTrouble.Text = "Troubleshooting"
    $tabTrouble.BackColor = $global:Config.Colors.Background
    $tabControl.TabPages.Add($tabTrouble)

    $troubleText = New-Object System.Windows.Forms.RichTextBox
    $troubleText.Size = New-Object System.Drawing.Size(760, 480)
    $troubleText.Location = New-Object System.Drawing.Point(10, 10)
    $troubleText.ReadOnly = $true
    $troubleText.BackColor = $global:Config.Colors.Secondary
    $troubleText.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $troubleText.Text = @"
TROUBLESHOOTING GUIDE

-------------------------------------------------------------------------------

COMMON ISSUES AND SOLUTIONS

Tool Won't Start
• Ensure PowerShell execution policy allows script execution
• Run PowerShell as Administrator and execute: Set-ExecutionPolicy RemoteSigned
• Verify .NET Framework 4.7.2 or later is installed
• Check that all required assemblies are available

File Conversion Fails
• Verify the source file is not corrupted or in use by another application
• Check that you have sufficient disk space in the output folder
• Ensure you have write permissions to the destination folder
• Try converting files one at a time to isolate problematic files

Password Removal Not Working
• Verify the password is correct (passwords are case-sensitive)
• Ensure all selected files use the same password
• Check that the Excel files are not corrupted
• Try processing files individually if batch processing fails

Slow Performance
• Close unnecessary applications to free up system resources
• Process files in smaller batches (10-20 files at a time)
• Use local drives instead of network drives when possible
• Consider upgrading system RAM if processing very large files

Error Messages
• Check the log files in the "logs" folder for detailed error information
• Note the exact error message and file name that caused the issue
• Verify file permissions and accessibility
• Try restarting the tool and attempting the operation again

Settings Not Saving
• Ensure you have write permissions to the tool's directory
• Check that the settings.json file is not read-only
• Verify sufficient disk space is available
• Run the tool as Administrator if permission issues persist

-------------------------------------------------------------------------------

GETTING HELP
If you continue to experience issues after trying these solutions:

1. Check the log files for detailed error messages
2. Document the exact steps that led to the problem
3. Note your system specifications and Office version
4. Contact the developer at geoffsmile@gmail.com with:
   • Description of the issue
   • Error messages (if any)
   • System information
   • Log file contents (if relevant)

-------------------------------------------------------------------------------

PERFORMANCE TIPS
• Regularly clean up old log files to maintain optimal performance
• Keep your system updated with the latest Windows updates
• Use SSD drives for better file processing speeds
• Close Excel and other Office applications while using the tool
• Consider processing large files during off-peak hours
"@
    $tabTrouble.Controls.Add($troubleText)

    # About Tab
    $tabAbout = New-Object System.Windows.Forms.TabPage
    $tabAbout.Text = "About"
    $tabAbout.BackColor = $global:Config.Colors.Background
    $tabControl.TabPages.Add($tabAbout)

    $aboutText = New-Object System.Windows.Forms.RichTextBox
    $aboutText.Size = New-Object System.Drawing.Size(760, 480)
    $aboutText.Location = New-Object System.Drawing.Point(10, 10)
    $aboutText.ReadOnly = $true
    $aboutText.BackColor = $global:Config.Colors.Secondary
    $aboutText.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $aboutText.Text = @"
ABOUT THE AUTHOR & TOOL

-------------------------------------------------------------------------------

DEVELOPER INFORMATION
Name: $($global:Config.Author)
Email: $($global:Config.Email)

-------------------------------------------------------------------------------

ABOUT GEOFF LU
As a reports analyst, software developer and automation enthusiast, I specialize in creating practical tools that solve real-world business challenges. With extensive experience in PowerShell
scripting, Windows Forms development, and business process automation, I focus on delivering solutions that are both powerful and user-friendly.

My development philosophy centers on creating tools that are:
• Intuitive enough for non-technical users
• Robust enough for enterprise environments
• Flexible enough to adapt to various workflows
• Reliable enough for daily business operations

-------------------------------------------------------------------------------

TOOL DEVELOPMENT HISTORY
Version 1.0 (Initial Release) - Basic file conversion functionality
Version 2.0 (Enhanced) - Added password removal features
Version 3.0 (Improved) - Enhanced UI and settings management
Version 4.0 (Current) - Added comprehensive help system and optimization

-------------------------------------------------------------------------------

INCLUDED FILES
• ExcelUtilityTool.ps1 - Main application script
• settings.json - User preferences and configuration (auto-generated)
• logs/ - Directory containing operation logs (auto-generated)
• README.txt - Basic usage instructions (if included)

-------------------------------------------------------------------------------

TECHNICAL SPECIFICATIONS
• Built with: PowerShell 5.1+ and .NET Framework
• UI Framework: Windows Forms
• Supported OS: Windows 10/11
• Architecture: Compatible with both x86 and x64 systems
• Dependencies: Microsoft Office Excel (recommended)

-------------------------------------------------------------------------------

CONTACT & SUPPORT
For technical support, feature requests, or general inquiries:
Email: geoffsmile@gmail.com

When contacting for support, please include:
• Tool version number
• Operating system and Office version
• Detailed description of the issue
• Steps to reproduce the problem
• Any error messages received

-------------------------------------------------------------------------------

COPYRIGHT & LICENSE
© 2025 Geoff Lu. All rights reserved.
This tool is provided as-is for educational and business use.
Redistribution and modification are permitted for personal and internal
business use only.
"@
    $tabAbout.Controls.Add($aboutText)

    # Close button
    $btnClose = [StandardButton]::new()
    $btnClose.Text = "Close"
    $btnClose.Size = New-Object System.Drawing.Size(100, 35)
    $btnClose.Location = New-Object System.Drawing.Point(690, 540)
    $btnClose.DialogResult = "OK"
    $helpForm.Controls.Add($btnClose)

    $helpForm.AcceptButton = $btnClose
    Write-Log "Help dialog displayed"
    return $helpForm.ShowDialog()
}

function Show-SettingsDialog {
    $settingsForm = New-Object System.Windows.Forms.Form
    $settingsForm.Text = "Application Tool Settings"
    $settingsForm.Size = New-Object System.Drawing.Size(580, 420)
    $settingsForm.StartPosition = "CenterParent"
    $settingsForm.FormBorderStyle = "FixedDialog"
    $settingsForm.MaximizeBox = $false
    $settingsForm.MinimizeBox = $false
    $settingsForm.BackColor = $global:Config.Colors.Background
    $settingsForm.Font = New-Object System.Drawing.Font("Segoe UI", 9)

    # Title
    $titleLabel = New-Object System.Windows.Forms.Label
    $titleLabel.Text = "Application Tool Settings"
    $titleLabel.Font = New-Object System.Drawing.Font("Segoe UI", 14, [System.Drawing.FontStyle]::Bold)
    $titleLabel.ForeColor = $global:Config.Colors.Primary
    $titleLabel.Size = New-Object System.Drawing.Size(540, 30)
    $titleLabel.Location = New-Object System.Drawing.Point(20, 15)
    $settingsForm.Controls.Add($titleLabel)

    # Default Paths Section
    $lblPaths = New-Object System.Windows.Forms.Label
    $lblPaths.Text = "Default Paths"
    $lblPaths.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
    $lblPaths.ForeColor = $global:Config.Colors.Text
    $lblPaths.Size = New-Object System.Drawing.Size(150, 25)
    $lblPaths.Location = New-Object System.Drawing.Point(20, 55)
    $settingsForm.Controls.Add($lblPaths)

    # Input Path
    $lblInput = New-Object System.Windows.Forms.Label
    $lblInput.Text = "Default Input Folder:"
    $lblInput.ForeColor = $global:Config.Colors.Text
    $lblInput.Size = New-Object System.Drawing.Size(130, 20)
    $lblInput.Location = New-Object System.Drawing.Point(30, 85)
    $settingsForm.Controls.Add($lblInput)

    $txtInputPath = New-Object System.Windows.Forms.TextBox
    $txtInputPath.Size = New-Object System.Drawing.Size(320, 23)
    $txtInputPath.Location = New-Object System.Drawing.Point(160, 83)
    $txtInputPath.BackColor = $global:Config.Colors.Secondary
    $txtInputPath.Text = $global:Config.Settings.DefaultInputPath
    $settingsForm.Controls.Add($txtInputPath)

    $btnBrowseInput = [AccentButton]::new()
    $btnBrowseInput.Text = "Browse..."
    $btnBrowseInput.Size = New-Object System.Drawing.Size(80, 25)
    $btnBrowseInput.Location = New-Object System.Drawing.Point(490, 82)
    $settingsForm.Controls.Add($btnBrowseInput)

    # Output Path
    $lblOutput = New-Object System.Windows.Forms.Label
    $lblOutput.Text = "Default Output Folder:"
    $lblOutput.ForeColor = $global:Config.Colors.Text
    $lblOutput.Size = New-Object System.Drawing.Size(130, 20)
    $lblOutput.Location = New-Object System.Drawing.Point(30, 115)
    $settingsForm.Controls.Add($lblOutput)

    $txtOutputPath = New-Object System.Windows.Forms.TextBox
    $txtOutputPath.Size = New-Object System.Drawing.Size(320, 23)
    $txtOutputPath.Location = New-Object System.Drawing.Point(160, 113)
    $txtOutputPath.BackColor = $global:Config.Colors.Secondary
    $txtOutputPath.Text = $global:Config.Settings.DefaultOutputPath
    $settingsForm.Controls.Add($txtOutputPath)

    $btnBrowseOutput = [AccentButton]::new()
    $btnBrowseOutput.Text = "Browse..."
    $btnBrowseOutput.Size = New-Object System.Drawing.Size(80, 25)
    $btnBrowseOutput.Location = New-Object System.Drawing.Point(490, 112)
    $settingsForm.Controls.Add($btnBrowseOutput)

    # Application Settings Section
    $lblAppSettings = New-Object System.Windows.Forms.Label
    $lblAppSettings.Text = "Application Settings"
    $lblAppSettings.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
    $lblAppSettings.ForeColor = $global:Config.Colors.Text
    $lblAppSettings.Size = New-Object System.Drawing.Size(200, 25)
    $lblAppSettings.Location = New-Object System.Drawing.Point(20, 155)
    $settingsForm.Controls.Add($lblAppSettings)

    # Checkboxes
    $chkRememberPaths = New-Object System.Windows.Forms.CheckBox
    $chkRememberPaths.Text = "Remember selected paths as defaults"
    $chkRememberPaths.Size = New-Object System.Drawing.Size(400, 25)
    $chkRememberPaths.Location = New-Object System.Drawing.Point(30, 185)
    $chkRememberPaths.Checked = $global:Config.Settings.RememberPaths
    $chkRememberPaths.ForeColor = $global:Config.Colors.Text
    $settingsForm.Controls.Add($chkRememberPaths)

    $chkAutoDelete = New-Object System.Windows.Forms.CheckBox
    $chkAutoDelete.Text = "Automatically delete original files after processing"
    $chkAutoDelete.Size = New-Object System.Drawing.Size(400, 25)
    $chkAutoDelete.Location = New-Object System.Drawing.Point(30, 215)
    $chkAutoDelete.Checked = $global:Config.Settings.AutoDeleteOriginals
    $chkAutoDelete.ForeColor = $global:Config.Colors.Text
    $settingsForm.Controls.Add($chkAutoDelete)

    $chkDetailedLogs = New-Object System.Windows.Forms.CheckBox
    $chkDetailedLogs.Text = "Show detailed logs in console"
    $chkDetailedLogs.Size = New-Object System.Drawing.Size(400, 25)
    $chkDetailedLogs.Location = New-Object System.Drawing.Point(30, 245)
    $chkDetailedLogs.Checked = $global:Config.Settings.ShowDetailedLogs
    $chkDetailedLogs.ForeColor = $global:Config.Colors.Text
    $settingsForm.Controls.Add($chkDetailedLogs)

    $chkSoundNotifications = New-Object System.Windows.Forms.CheckBox
    $chkSoundNotifications.Text = "Enable sound notifications for completed operations"
    $chkSoundNotifications.Size = New-Object System.Drawing.Size(400, 25)
    $chkSoundNotifications.Location = New-Object System.Drawing.Point(30, 275)
    $chkSoundNotifications.Checked = $global:Config.Settings.EnableSoundNotifications
    $chkSoundNotifications.ForeColor = $global:Config.Colors.Text
    $settingsForm.Controls.Add($chkSoundNotifications)

    # Advanced Settings Section
    $lblAdvSettings = New-Object System.Windows.Forms.Label
    $lblAdvSettings.Text = "Advanced Settings"
    $lblAdvSettings.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
    $lblAdvSettings.ForeColor = $global:Config.Colors.Text
    $lblAdvSettings.Size = New-Object System.Drawing.Size(200, 25)
    $lblAdvSettings.Location = New-Object System.Drawing.Point(20, 315)
    $settingsForm.Controls.Add($lblAdvSettings)

    # Information text
    $lblInfo = New-Object System.Windows.Forms.Label
    $lblInfo.Text = "These settings will be saved automatically and applied when you restart the application."
    $lblInfo.ForeColor = $global:Config.Colors.Text
    $lblInfo.Size = New-Object System.Drawing.Size(400, 20)
    $lblInfo.Location = New-Object System.Drawing.Point(30, 340)
    $lblInfo.Font = New-Object System.Drawing.Font("Segoe UI", 8, [System.Drawing.FontStyle]::Italic)
    $settingsForm.Controls.Add($lblInfo)

    # Buttons
    $btnOK = [StandardButton]::new()
    $btnOK.Text = "Save"
    $btnOK.Size = New-Object System.Drawing.Size(90, 32)
    $btnOK.Location = New-Object System.Drawing.Point(370, 340)
    $btnOK.DialogResult = "OK"
    $settingsForm.Controls.Add($btnOK)

    $btnCancel = [StandardButton]::new()
    $btnCancel.Text = "Cancel"
    $btnCancel.Size = New-Object System.Drawing.Size(90, 32)
    $btnCancel.Location = New-Object System.Drawing.Point(470, 340)
    $btnCancel.DialogResult = "Cancel"
    $settingsForm.Controls.Add($btnCancel)

    $settingsForm.AcceptButton = $btnOK
    $settingsForm.CancelButton = $btnCancel

    # Event handlers
    $btnBrowseInput.Add_Click({
        $fbd = New-Object System.Windows.Forms.FolderBrowserDialog
        $fbd.Description = "Select Default Input Folder"
        if (-not [string]::IsNullOrWhiteSpace($txtInputPath.Text)) {
            $fbd.SelectedPath = $txtInputPath.Text
        }
        if ($fbd.ShowDialog() -eq "OK") {
            $txtInputPath.Text = $fbd.SelectedPath
        }
    })
    
    $btnBrowseOutput.Add_Click({
        $fbd = New-Object System.Windows.Forms.FolderBrowserDialog
        $fbd.Description = "Select Default Output Folder"
        if (-not [string]::IsNullOrWhiteSpace($txtOutputPath.Text)) {
            $fbd.SelectedPath = $txtOutputPath.Text
        }
        if ($fbd.ShowDialog() -eq "OK") {
            $txtOutputPath.Text = $fbd.SelectedPath
        }
    })
    
    $btnOK.Add_Click({
        # Validate paths if they're not empty
        if (-not [string]::IsNullOrWhiteSpace($txtInputPath.Text) -and -not (Test-Path $txtInputPath.Text)) {
            Show-MessageBox "Input path does not exist: $($txtInputPath.Text)" "Invalid Path" "Warning"
            return
        }
        
        if (-not [string]::IsNullOrWhiteSpace($txtOutputPath.Text) -and -not (Test-Path $txtOutputPath.Text)) {
            Show-MessageBox "Output path does not exist: $($txtOutputPath.Text)" "Invalid Path" "Warning"
            return
        }
        
        # Save settings
        $global:Config.Settings.DefaultInputPath = $txtInputPath.Text
        $global:Config.Settings.DefaultOutputPath = $txtOutputPath.Text
        $global:Config.Settings.RememberPaths = $chkRememberPaths.Checked
        $global:Config.Settings.AutoDeleteOriginals = $chkAutoDelete.Checked
        $global:Config.Settings.ShowDetailedLogs = $chkDetailedLogs.Checked
        $global:Config.Settings.EnableSoundNotifications = $chkSoundNotifications.Checked
        
        if (Save-Settings) {
            Show-MessageBox "Settings saved successfully." "Settings" "Success"
            $settingsForm.Close()
        }
        else {
            Show-MessageBox "Failed to save settings. Please try again." "Error" "Error"
        }
    })

    Write-Log "Settings dialog displayed"
    return $settingsForm.ShowDialog()
}

# ==============================================================================
# MAIN APPLICATION FORM
# ==============================================================================

function Initialize-MainForm {
    Load-Settings
    
    $mainForm = New-Object System.Windows.Forms.Form
    $mainForm.Text = "Excel Utility Tool v$($global:Config.Version) - $($global:Config.Author)"
    $mainForm.Size = New-Object System.Drawing.Size(450, 400)
    $mainForm.StartPosition = "CenterScreen"
    $mainForm.FormBorderStyle = "FixedDialog"
    $mainForm.MaximizeBox = $false
    $mainForm.BackColor = $global:Config.Colors.Background
    $mainForm.Font = New-Object System.Drawing.Font("Segoe UI", 9)
    
    # Title
    $titleLabel = New-Object System.Windows.Forms.Label
    $titleLabel.Text = "Excel Utility Tool"
    $titleLabel.Font = New-Object System.Drawing.Font("Segoe UI", 16, [System.Drawing.FontStyle]::Bold)
    $titleLabel.ForeColor = $global:Config.Colors.Primary
    $titleLabel.Size = New-Object System.Drawing.Size(360, 30)
    $titleLabel.Location = New-Object System.Drawing.Point(20, 20)
    $mainForm.Controls.Add($titleLabel)
    
    # Version
    $versionLabel = New-Object System.Windows.Forms.Label
    $versionLabel.Text = "Version $($global:Config.Version)"
    $versionLabel.Size = New-Object System.Drawing.Size(360, 20)
    $versionLabel.Location = New-Object System.Drawing.Point(20, 50)
    $versionLabel.ForeColor = $global:Config.Colors.Text
    $mainForm.Controls.Add($versionLabel)

    # Help button (new addition)
    $btnHelp = [AccentButton]::new()
    $btnHelp.Text = "?"
    $btnHelp.Size = New-Object System.Drawing.Size(32, 32)
    $btnHelp.Location = New-Object System.Drawing.Point(390, 20)
    $btnHelp.Font = New-Object System.Drawing.Font("Segoe UI", 12, [System.Drawing.FontStyle]::Bold)
    $btnHelp.Add_Click({ Show-HelpDialog })
    $mainForm.Controls.Add($btnHelp)

    # Main buttons
    $script:btnConvert = [StandardButton]::new()
    $script:btnConvert.Text = "Convert to Excel (.xlsx)"
    $script:btnConvert.Size = New-Object System.Drawing.Size(400, 40)
    $script:btnConvert.Location = New-Object System.Drawing.Point(20, 90)
    $mainForm.Controls.Add($script:btnConvert)
    
    $script:btnRemovePassword = [StandardButton]::new()
    $script:btnRemovePassword.Text = "Unlock Excel File"
    $script:btnRemovePassword.Size = New-Object System.Drawing.Size(400, 40)
    $script:btnRemovePassword.Location = New-Object System.Drawing.Point(20, 140)
    $mainForm.Controls.Add($script:btnRemovePassword)
    
    $script:btnSettings = [StandardButton]::new()
    $script:btnSettings.Text = "Application Tool Settings"
    $script:btnSettings.Size = New-Object System.Drawing.Size(400, 40)
    $script:btnSettings.Location = New-Object System.Drawing.Point(20, 190)
    $mainForm.Controls.Add($script:btnSettings)
    
    # Status area
    $script:statusLabel = New-Object System.Windows.Forms.Label
    $script:statusLabel.Text = "Ready!"
    $script:statusLabel.Size = New-Object System.Drawing.Size(400, 20)
    $script:statusLabel.Location = New-Object System.Drawing.Point(20, 250)
    $script:statusLabel.ForeColor = $global:Config.Colors.Success
    $mainForm.Controls.Add($script:statusLabel)
    
    # Progress bar
    $script:progressBar = New-Object System.Windows.Forms.ProgressBar
    $script:progressBar.Size = New-Object System.Drawing.Size(400, 25)
    $script:progressBar.Location = New-Object System.Drawing.Point(20, 280)
    $script:progressBar.Style = "Continuous"
    $mainForm.Controls.Add($script:progressBar)
    
    # Footer
    $footerLabel = New-Object System.Windows.Forms.Label
    $footerLabel.Text = "© $($global:Config.CreatedDate.Split()[0]) $($global:Config.Author). All rights reserved.`nContact: $($global:Config.Email)"
    $footerLabel.Size = New-Object System.Drawing.Size(400, 40)
    $footerLabel.Location = New-Object System.Drawing.Point(20, 320)
    $footerLabel.ForeColor = $global:Config.Colors.Text
    $footerLabel.Font = New-Object System.Drawing.Font("Segoe UI", 8)
    $footerLabel.TextAlign = "MiddleCenter"
    $mainForm.Controls.Add($footerLabel)

    # Continuing from the last line in settings dialog...
    $chkDetailedLogs.Location = New-Object System.Drawing.Point(30, 245)
    $chkDetailedLogs.Checked = $global:Config.Settings.ShowDetailedLogs
    $chkDetailedLogs.ForeColor = $global:Config.Colors.Text
    $settingsForm.Controls.Add($chkDetailedLogs)

    $chkSoundNotifications = New-Object System.Windows.Forms.CheckBox
    $chkSoundNotifications.Text = "Enable sound notifications for completed operations"
    $chkSoundNotifications.Size = New-Object System.Drawing.Size(400, 25)
    $chkSoundNotifications.Location = New-Object System.Drawing.Point(30, 275)
    $chkSoundNotifications.Checked = $global:Config.Settings.EnableSoundNotifications
    $chkSoundNotifications.ForeColor = $global:Config.Colors.Text
    $settingsForm.Controls.Add($chkSoundNotifications)

    # Advanced Settings Section
    $lblAdvSettings = New-Object System.Windows.Forms.Label
    $lblAdvSettings.Text = "Advanced Settings"
    $lblAdvSettings.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
    $lblAdvSettings.ForeColor = $global:Config.Colors.Text
    $lblAdvSettings.Size = New-Object System.Drawing.Size(200, 25)
    $lblAdvSettings.Location = New-Object System.Drawing.Point(20, 315)
    $settingsForm.Controls.Add($lblAdvSettings)

    # Information text
    $lblInfo = New-Object System.Windows.Forms.Label
    $lblInfo.Text = "These settings will be saved automatically and applied when you restart the application."
    $lblInfo.ForeColor = $global:Config.Colors.Text
    $lblInfo.Size = New-Object System.Drawing.Size(400, 20)
    $lblInfo.Location = New-Object System.Drawing.Point(30, 340)
    $lblInfo.Font = New-Object System.Drawing.Font("Segoe UI", 8, [System.Drawing.FontStyle]::Italic)
    $settingsForm.Controls.Add($lblInfo)

    # Buttons
    $btnOK = [StandardButton]::new()
    $btnOK.Text = "Save"
    $btnOK.Size = New-Object System.Drawing.Size(90, 32)
    $btnOK.Location = New-Object System.Drawing.Point(370, 340)
    $btnOK.DialogResult = "OK"
    $settingsForm.Controls.Add($btnOK)

    $btnCancel = [StandardButton]::new()
    $btnCancel.Text = "Cancel"
    $btnCancel.Size = New-Object System.Drawing.Size(90, 32)
    $btnCancel.Location = New-Object System.Drawing.Point(470, 340)
    $btnCancel.DialogResult = "Cancel"
    $settingsForm.Controls.Add($btnCancel)

    $settingsForm.AcceptButton = $btnOK
    $settingsForm.CancelButton = $btnCancel

    # Event handlers
    $btnBrowseInput.Add_Click({
        $fbd = New-Object System.Windows.Forms.FolderBrowserDialog
        $fbd.Description = "Select Default Input Folder"
        if (-not [string]::IsNullOrWhiteSpace($txtInputPath.Text)) {
            $fbd.SelectedPath = $txtInputPath.Text
        }
        if ($fbd.ShowDialog() -eq "OK") {
            $txtInputPath.Text = $fbd.SelectedPath
        }
    })
    
    $btnBrowseOutput.Add_Click({
        $fbd = New-Object System.Windows.Forms.FolderBrowserDialog
        $fbd.Description = "Select Default Output Folder"
        if (-not [string]::IsNullOrWhiteSpace($txtOutputPath.Text)) {
            $fbd.SelectedPath = $txtOutputPath.Text
        }
        if ($fbd.ShowDialog() -eq "OK") {
            $txtOutputPath.Text = $fbd.SelectedPath
        }
    })
    
    $btnOK.Add_Click({
        # Validate paths if they're not empty
        if (-not [string]::IsNullOrWhiteSpace($txtInputPath.Text) -and -not (Test-Path $txtInputPath.Text)) {
            Show-MessageBox "Input path does not exist: $($txtInputPath.Text)" "Invalid Path" "Warning"
            return
        }
        
        if (-not [string]::IsNullOrWhiteSpace($txtOutputPath.Text) -and -not (Test-Path $txtOutputPath.Text)) {
            Show-MessageBox "Output path does not exist: $($txtOutputPath.Text)" "Invalid Path" "Warning"
            return
        }
        
        # Save settings
        $global:Config.Settings.DefaultInputPath = $txtInputPath.Text
        $global:Config.Settings.DefaultOutputPath = $txtOutputPath.Text
        $global:Config.Settings.RememberPaths = $chkRememberPaths.Checked
        $global:Config.Settings.AutoDeleteOriginals = $chkAutoDelete.Checked
        $global:Config.Settings.ShowDetailedLogs = $chkDetailedLogs.Checked
        $global:Config.Settings.EnableSoundNotifications = $chkSoundNotifications.Checked
        
        if (Save-Settings) {
            Show-MessageBox "Settings saved successfully." "Settings" "Success"
            $settingsForm.Close()
        }
        else {
            Show-MessageBox "Failed to save settings. Please try again." "Error" "Error"
        }
    })

    Write-Log "Settings dialog displayed"
    return $settingsForm.ShowDialog()
}

# ==============================================================================
# FILE PROCESSING FUNCTIONS
# ==============================================================================

function Convert-ToExcel {
    param(
        [Parameter(Mandatory=$true)]
        [string[]]$InputFiles,
        
        [Parameter(Mandatory=$true)]
        [string]$OutputFolder
    )

    $convertedCount = 0
    $totalFiles = $InputFiles.Count
    $excel = $null
    
    try {
        # Create Excel application object
        $excel = New-Object -ComObject Excel.Application
        $excel.Visible = $false
        $excel.DisplayAlerts = $false
        
        Write-Log "Excel COM object initialized successfully" "INFO"
        
        foreach ($file in $InputFiles) {
            try {
                $fileName = [System.IO.Path]::GetFileNameWithoutExtension($file)
                $extension = [System.IO.Path]::GetExtension($file).ToLower()
                $outputFile = Join-Path $OutputFolder "$fileName.xlsx"
                
                # Update progress
                $progress = [math]::Round(($convertedCount / $totalFiles) * 100)
                $script:progressBar.Value = $progress
                $script:statusLabel.Text = "Converting: $([System.IO.Path]::GetFileName($file))"
                [System.Windows.Forms.Application]::DoEvents()
                
                # Handle different file types
                switch ($extension) {
                    ".csv" {
                        $workbook = $excel.Workbooks.Open($file)
                        $workbook.SaveAs($outputFile, [Microsoft.Office.Interop.Excel.XlFileFormat]::xlOpenXMLWorkbook)
                        $workbook.Close($true)
                    }
                    ".txt" {
                        $workbook = $excel.Workbooks.OpenText(
                            $file,
                            [Microsoft.Office.Interop.Excel.XlPlatform]::xlWindows,
                            1,  # Start from row 1
                            [Microsoft.Office.Interop.Excel.XlTextParsingType]::xlDelimited,
                            [Microsoft.Office.Interop.Excel.XlTextQualifier]::xlTextQualifierDoubleQuote,
                            $false,  # Consecutive delimiter as one
                            $true,   # Tab delimiter
                            $true,   # Comma delimiter
                            $false,  # Space delimiter
                            $false,  # Semicolon delimiter
                            $false   # Other delimiter
                        )
                        $workbook.SaveAs($outputFile, [Microsoft.Office.Interop.Excel.XlFileFormat]::xlOpenXMLWorkbook)
                        $workbook.Close($true)
                    }
                    ".xls" {
                        $workbook = $excel.Workbooks.Open($file)
                        $workbook.SaveAs($outputFile, [Microsoft.Office.Interop.Excel.XlFileFormat]::xlOpenXMLWorkbook)
                        $workbook.Close($true)
                    }
                    default {
                        Write-Log "Unsupported file format: $extension" "WARNING"
                        continue
                    }
                }
                
                $convertedCount++
                Write-Log "Converted file: $file to $outputFile" "INFO"
                
                if ($global:Config.Settings.AutoDeleteOriginals) {
                    # Ensure file handle is released before deletion
                    [System.GC]::Collect()
                    [System.GC]::WaitForPendingFinalizers()
                    
                    Remove-Item $file -Force
                    Write-Log "Deleted original file: $file" "INFO"
                }
            }
            catch {
                Write-Log "Error converting file $file : $($_.Exception.Message)" "ERROR"
                Show-MessageBox "Failed to convert file: $([System.IO.Path]::GetFileName($file))`n`nError: $($_.Exception.Message)" "Conversion Error" "Error"
            }
        }
    }
    catch {
        Write-Log "Error initializing Excel: $($_.Exception.Message)" "ERROR"
        throw
    }
    finally {
        if ($excel) {
            $excel.Quit()
            [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
            [System.GC]::Collect()
            [System.GC]::WaitForPendingFinalizers()
        }
    }
    
    if ($global:Config.Settings.EnableSoundNotifications) {
        [System.Media.SystemSounds]::Asterisk.Play()
    }
    
    return $convertedCount
}

function Remove-ExcelPassword {
    param(
        [Parameter(Mandatory=$true)]
        [string[]]$InputFiles,
        
        [Parameter(Mandatory=$true)]
        [string]$OutputFolder,
        
        [Parameter(Mandatory=$true)]
        [string]$Password
    )

    $processedCount = 0
    $totalFiles = $InputFiles.Count
    $excel = $null
    
    try {
        # Create Excel application object
        $excel = New-Object -ComObject Excel.Application
        $excel.Visible = $false
        $excel.DisplayAlerts = $false
        
        Write-Log "Excel COM object initialized successfully" "INFO"
        
        foreach ($file in $InputFiles) {
            try {
                $fileName = [System.IO.Path]::GetFileNameWithoutExtension($file)
                $outputFile = Join-Path $OutputFolder "$fileName`_unlocked.xlsx"
                
                # Update progress
                $progress = [math]::Round(($processedCount / $totalFiles) * 100)
                $script:progressBar.Value = $progress
                $script:statusLabel.Text = "Unlocking: $([System.IO.Path]::GetFileName($file))"
                [System.Windows.Forms.Application]::DoEvents()
                
                # Open workbook with password
                $workbook = $excel.Workbooks.Open(
                    $file,
                    0,          # UpdateLinks
                    $false,     # ReadOnly
                    [Type]::Missing, # Format
                    $Password   # Password
                )
                
                # Save without password protection
                $workbook.SaveAs(
                    $outputFile,
                    [Microsoft.Office.Interop.Excel.XlFileFormat]::xlOpenXMLWorkbook,
                    "",         # Password
                    "",         # WriteResPassword
                    $false,     # ReadOnlyRecommended
                    $false,     # CreateBackup
                    [Microsoft.Office.Interop.Excel.XlSaveAsAccessMode]::xlNoChange,
                    $false,     # ConflictResolution
                    $true,      # AddToMru
                    $false      # TextCodepage
                )
                
                $workbook.Close($true)
                
                $processedCount++
                Write-Log "Removed password from file: $file" "INFO"
                
                if ($global:Config.Settings.AutoDeleteOriginals) {
                    # Ensure file handle is released before deletion
                    [System.GC]::Collect()
                    [System.GC]::WaitForPendingFinalizers()
                    
                    Remove-Item $file -Force
                    Write-Log "Deleted original file: $file" "INFO"
                }
            }
            catch {
                Write-Log "Error removing password from $file : $($_.Exception.Message)" "ERROR"
                Show-MessageBox "Failed to unlock file: $([System.IO.Path]::GetFileName($file))`n`nError: $($_.Exception.Message)" "Password Removal Error" "Error"
            }
        }
    }
    catch {
        Write-Log "Error initializing Excel: $($_.Exception.Message)" "ERROR"
        throw
    }
    finally {
        if ($excel) {
            $excel.Quit()
            [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
            [System.GC]::Collect()
            [System.GC]::WaitForPendingFinalizers()
        }
    }
    
    if ($global:Config.Settings.EnableSoundNotifications) {
        [System.Media.SystemSounds]::Asterisk.Play()
    }
    
    return $processedCount
}

# ==============================================================================
# EVENT HANDLERS
# ==============================================================================

# Convert button click handler
$script:btnConvert.Add_Click({
    try {
        $script:statusLabel.Text = "Selecting files..."
        $inputFiles = Get-InputFiles "Select files to convert to .xlsx" "CSV files (*.csv)|*.csv|Text files (*.txt)|*.txt|Excel files (*.xls)|*.xls|All files (*.*)|*.*"
        if (-not $inputFiles) { 
            $script:statusLabel.Text = "Ready"
            return 
        }
        
        $script:statusLabel.Text = "Selecting output folder..."
        $outputFolder = Get-OutputFolder "Select output folder for converted files"
        if (-not $outputFolder) { 
            $script:statusLabel.Text = "Ready"
            return 
        }
        
        # Disable buttons during processing
        $script:btnConvert.Enabled = $false
        $script:btnRemovePassword.Enabled = $false
        $script:btnSettings.Enabled = $false
        
        $script:statusLabel.Text = "Processing files..."
        $convertedCount = Convert-ToExcel -InputFiles $inputFiles -OutputFolder $outputFolder
        
        $script:statusLabel.Text = "Successfully converted $convertedCount files"
        Show-MessageBox "Successfully converted $convertedCount files to Excel format." "Conversion Complete" "Success"
    }
    catch {
        $script:statusLabel.Text = "Error occurred"
        Show-MessageBox "An error occurred during file conversion: $($_.Exception.Message)" "Error" "Error"
        Write-Log "Error in convert button click: $($_.Exception.Message)" "ERROR"
    }
    finally {
        # Always re-enable buttons
        $script:btnConvert.Enabled = $true
        $script:btnRemovePassword.Enabled = $true
        $script:btnSettings.Enabled = $true
        $script:progressBar.Value = 0
    }
})

# Remove Password button click handler
$script:btnRemovePassword.Add_Click({
    try {
        $password = Get-PasswordInput "Enter Excel Password"
        if (-not $password) { return }
        
        $script:statusLabel.Text = "Selecting files..."
        $inputFiles = Get-InputFiles "Select password-protected Excel files" "Excel files (*.xls;*.xlsx)|*.xls;*.xlsx|All files (*.*)|*.*"
        if (-not $inputFiles) { 
            $script:statusLabel.Text = "Ready"
            return 
        }
        
        $script:statusLabel.Text = "Selecting output folder..."
        $outputFolder = Get-OutputFolder "Select output folder for unlocked files"
        if (-not $outputFolder) { 
            $script:statusLabel.Text = "Ready"
            return 
        }
        
        # Disable buttons during processing
        $script:btnConvert.Enabled = $false
        $script:btnRemovePassword.Enabled = $false
        $script:btnSettings.Enabled = $false
        
        $script:statusLabel.Text = "Processing files..."
        $processedCount = Remove-ExcelPassword -InputFiles $inputFiles -OutputFolder $outputFolder -Password $password
        
        $script:statusLabel.Text = "Successfully unlocked $processedCount files"
        Show-MessageBox "Successfully unlocked $processedCount Excel files." "Password Removal Complete" "Success"
    }
    catch {
        $script:statusLabel.Text = "Error occurred"
        Show-MessageBox "An error occurred during password removal: $($_.Exception.Message)" "Error" "Error"
        Write-Log "Error in remove password button click: $($_.Exception.Message)" "ERROR"
    }
    finally {
        # Always re-enable buttons
        $script:btnConvert.Enabled = $true
        $script:btnRemovePassword.Enabled = $true
        $script:btnSettings.Enabled = $true
        $script:progressBar.Value = 0
    }
})

# Settings button click handler
$script:btnSettings.Add_Click({
    Show-SettingsDialog | Out-Null
})

# Form closing event
$mainForm.Add_FormClosing({
    Write-Log "Application closing"
})

# Initialize logging
Write-Log "Excel Utility Tool v$($global:Config.Version) started"

return $mainForm
}

# ==============================================================================
# APPLICATION ENTRY POINT
# ==============================================================================

# Ensure required directories exist
if (-not (Test-Path $global:Config.LogPath)) {
    New-Item -Path $global:Config.LogPath -ItemType Directory -Force | Out-Null
}

# Start the application
try {
    Write-Host "Starting Excel Utility Tool v$($global:Config.Version)..." -ForegroundColor Green
    Write-Host "Created by: $($global:Config.Author)" -ForegroundColor Cyan
    Write-Host "Last Modified: $($global:Config.LastModified)" -ForegroundColor Cyan
    
    $mainForm = Initialize-MainForm
    Write-Log "Application started successfully"
    [void]$mainForm.ShowDialog()
}
catch {
    Write-Error "Failed to start application: $($_.Exception.Message)"
    Write-Log "Application startup failed: $($_.Exception.Message)" "ERROR"
    
    [System.Windows.Forms.MessageBox]::Show(
        "Failed to start the Excel Utility Tool:`n`n$($_.Exception.Message)`n`nPlease check the log files for more details.",
        "Startup Error",
        "OK",
        [System.Windows.Forms.MessageBoxIcon]::Error
    )
}
finally {
    Write-Log "Application session ended"
}

# ==============================================================================
# END OF SCRIPT
# ==============================================================================
